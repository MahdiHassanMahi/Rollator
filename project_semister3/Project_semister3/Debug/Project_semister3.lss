
Project_semister3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000402  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000476  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa1  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000753  00000000  00000000  00001049  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000691  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e8  00000000  00000000  000023c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000024af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
   4:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_1>
   8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_2>
   c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  68:	b4 01       	movw	r22, r8
  6a:	a9 01       	movw	r20, r18
  6c:	9e 01       	movw	r18, r28
  6e:	93 01       	movw	r18, r6
  70:	88 01       	movw	r16, r16
  72:	45 01       	movw	r8, r10
  74:	4e 01       	movw	r8, r28
  76:	5c 01       	movw	r10, r24
  78:	67 01       	movw	r12, r14
  7a:	72 01       	movw	r14, r4
  7c:	7d 01       	movw	r14, r26

0000007e <__ctors_end>:
  7e:	11 24       	eor	r1, r1
  80:	1f be       	out	0x3f, r1	; 63
  82:	cf ef       	ldi	r28, 0xFF	; 255
  84:	d8 e0       	ldi	r29, 0x08	; 8
  86:	de bf       	out	0x3e, r29	; 62
  88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
// PD7 is the pin for switching on/off on    


int main(void) {
	// Setup motor and speed modules
	motor_setup();
  a6:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_setup>
	//speed_setup();
	setup_interrupts1();
  aa:	0e 94 96 00 	call	0x12c	; 0x12c <setup_interrupts1>

	// Button pins as input
	DDRB &= ~( BUTTON_LEFT | BUTTON_RIGHT );
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	8c 7f       	andi	r24, 0xFC	; 252
  b2:	84 b9       	out	0x04, r24	; 4

	// Enable pull-up resistors for buttons
	PORTB |= ( BUTTON_LEFT | BUTTON_RIGHT );
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	85 b9       	out	0x05, r24	; 5
	
	
	while (1) {	
		
		
        statemachine();
  ba:	0e 94 e7 01 	call	0x3ce	; 0x3ce <statemachine>
  be:	fd cf       	rjmp	.-6      	; 0xba <main+0x14>

000000c0 <motor_setup>:
	// PD5 OCR0B-> PWM for left (timer 0)
	// PD6 OCR0A-> PWM for right (timer 0)
	// PD4 is for controlling direction
	// PD7 is for switching on/off

	DDRD |= (1 << DDD4) | (1 << DDD5) | ( 1<< DDD6) | (1<< DDD7);
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	80 6f       	ori	r24, 0xF0	; 240
  c4:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << DDB4) | (1 << DDB5);				
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	80 63       	ori	r24, 0x30	; 48
  ca:	84 b9       	out	0x04, r24	; 4
	TCCR0A |= (1 << WGM01) | (1 << WGM00);			 // Fast PWM
  cc:	84 b5       	in	r24, 0x24	; 36
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1);
  d2:	84 b5       	in	r24, 0x24	; 36
  d4:	80 6a       	ori	r24, 0xA0	; 160
  d6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02);							// clk I/O 256 pr e-scaler
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	85 bd       	out	0x25, r24	; 37
	OCR0B = 255;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	88 bd       	out	0x28, r24	; 40
	OCR0A = 255;	
  e2:	87 bd       	out	0x27, r24	; 39
  e4:	08 95       	ret

000000e6 <forward>:

void forward()
{
	//PORTD |= (1<<PORTD4);
	//PORTD &= ~(1<<PORTD4);
	OCR0A = speedMotors;
  e6:	e4 e0       	ldi	r30, 0x04	; 4
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	80 81       	ld	r24, Z
  ec:	87 bd       	out	0x27, r24	; 39
	OCR0B = speedMotors;
  ee:	80 81       	ld	r24, Z
  f0:	88 bd       	out	0x28, r24	; 40
  f2:	08 95       	ret

000000f4 <backward>:
}

void backward()
{
	//PORTD &= ~(1<<PORTD4);
	PORTD |= (1<<PORTD4);
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	8b b9       	out	0x0b, r24	; 11
	OCR0A = speedMotors;
  fa:	e4 e0       	ldi	r30, 0x04	; 4
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	80 81       	ld	r24, Z
 100:	87 bd       	out	0x27, r24	; 39
	OCR0B = speedMotors;
 102:	80 81       	ld	r24, Z
 104:	88 bd       	out	0x28, r24	; 40
 106:	08 95       	ret

00000108 <leftTank>:
}

void leftTank()
{
	OCR0A = 247;
 108:	87 ef       	ldi	r24, 0xF7	; 247
 10a:	87 bd       	out	0x27, r24	; 39
	OCR0B = OFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	88 bd       	out	0x28, r24	; 40
 110:	08 95       	ret

00000112 <rightTank>:
}


void rightTank()
{
	OCR0A = OFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	87 bd       	out	0x27, r24	; 39
	OCR0B = 247;
 116:	87 ef       	ldi	r24, 0xF7	; 247
 118:	88 bd       	out	0x28, r24	; 40
 11a:	08 95       	ret

0000011c <motorOn>:


void motorOn()
{
  
    PORTD |= (1<<PORTD7);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	8b b9       	out	0x0b, r24	; 11
 122:	08 95       	ret

00000124 <motorOff>:

}

void motorOff()
{
	PORTD &= ~ (1<<PORTD7);
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	8f 77       	andi	r24, 0x7F	; 127
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	08 95       	ret

0000012c <setup_interrupts1>:
#define COUNTER_MAX 5  // Maximum value for the counter
#define COUNTER_MIN -5 // Minimum value for the counter

void setup_interrupts1() {
	// Configure button pins as input
	DDRD &= ~(1 << BUTTON_INCREASE_PIN); // Set PD2 as input
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << BUTTON_DECREASE_PIN); // Set PD3 as input
 132:	8a b1       	in	r24, 0x0a	; 10
 134:	87 7f       	andi	r24, 0xF7	; 247
 136:	8a b9       	out	0x0a, r24	; 10
	
	// Configure button pins as input
	DDRB &= ~((1 << BUTTON_LEFT_PIN) | (1 << BUTTON_RIGHT_PIN)); // Set PB0 and PB1 as input
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	8c 7f       	andi	r24, 0xFC	; 252
 13c:	84 b9       	out	0x04, r24	; 4

	// Enable pull-up resistors for buttons
	PORTD |= (1 << BUTTON_INCREASE_PIN);
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	84 60       	ori	r24, 0x04	; 4
 142:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << BUTTON_DECREASE_PIN);
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	88 60       	ori	r24, 0x08	; 8
 148:	8b b9       	out	0x0b, r24	; 11
	
	// Enable pull-up resistors for buttons
	PORTB |= (1 << BUTTON_LEFT_PIN) | (1 << BUTTON_RIGHT_PIN);
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	83 60       	ori	r24, 0x03	; 3
 14e:	85 b9       	out	0x05, r24	; 5

	// Configure external interrupts
	EICRA |= (1 << ISC01) | (1 << ISC00); // Rising edge for INT0 (PD2)
 150:	e9 e6       	ldi	r30, 0x69	; 105
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	83 60       	ori	r24, 0x03	; 3
 158:	80 83       	st	Z, r24
	EICRA |= (1 << ISC11) | (1 << ISC10); // Rising edge for INT1 (PD3)
 15a:	80 81       	ld	r24, Z
 15c:	8c 60       	ori	r24, 0x0C	; 12
 15e:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0) | (1 << INT1);   // Enable INT0 and INT1 interrupts
 160:	8d b3       	in	r24, 0x1d	; 29
 162:	83 60       	ori	r24, 0x03	; 3
 164:	8d bb       	out	0x1d, r24	; 29
	
	// Enable pin change interrupts for PB0 and PB1
	PCICR |= (1 << PCIE0);         // Enable pin change interrupt for PCINT[7:0] (Port B)
 166:	e8 e6       	ldi	r30, 0x68	; 104
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1); // Enable interrupt for PB0 (PCINT0) and PB1 (PCINT1)
 170:	eb e6       	ldi	r30, 0x6B	; 107
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	83 60       	ori	r24, 0x03	; 3
 178:	80 83       	st	Z, r24

	// Enable global interrupts
	sei();
 17a:	78 94       	sei
 17c:	08 95       	ret

0000017e <__vector_3>:
}



// Interrupt Service Routine for pin change interrupt on Port B
ISR(PCINT0_vect) {
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
	// Check which button was pressed
	if (!(PINB & (1 << BUTTON_LEFT_PIN))) {
 18c:	18 99       	sbic	0x03, 0	; 3
 18e:	0d c0       	rjmp	.+26     	; 0x1aa <__vector_3+0x2c>
		// Left button pressed
	    stateF = RB_MODE; // Set state to RB_MODE
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		gg = 1;			
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <gg+0x1>
 1a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <gg>
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <__vector_3+0x44>
		} else if (!(PINB & (1 << BUTTON_RIGHT_PIN))) {
 1aa:	19 99       	sbic	0x03, 1	; 3
 1ac:	0a c0       	rjmp	.+20     	; 0x1c2 <__vector_3+0x44>
		// Right button pressed
		stateF = RB_MODE; // Set state to RB_MODE
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		gg = 2;			
 1ba:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <gg+0x1>
 1be:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <gg>
	    }
}
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <__vector_1>:

// Interrupt Service Routine for INT0 (Increase counter)
ISR(INT0_vect) {
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
	if (counter < COUNTER_MAX) {
 1de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 1e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 1e6:	05 97       	sbiw	r24, 0x05	; 5
 1e8:	7c f4       	brge	.+30     	; 0x208 <__vector_1+0x38>
		counter++;
 1ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 1ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 1f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
		stateF = FB_MODE; // Set state to FB_MODE
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 204:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <__vector_2>:

// Interrupt Service Routine for INT1 (Decrease counter)
ISR(INT1_vect) {
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
	if (counter > COUNTER_MIN) {
 226:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 22a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 22e:	8c 3f       	cpi	r24, 0xFC	; 252
 230:	9f 4f       	sbci	r25, 0xFF	; 255
 232:	7c f0       	brlt	.+30     	; 0x252 <__vector_2+0x3c>
		counter--;
 234:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 238:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 242:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
		stateF = FB_MODE; // Set state to FB_MODE
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 24e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <FBfunction>:
// it move forward from 1 to 5 with different speed and for -1 to -5 in backward on different speed 
// note this motor driver already had 5V on PWM pin of its own
// so for controlling the speed higher speed can be achieve by lower PWM power and for lower vis versa
void FBfunction() {
	
	if (stateF != FB_MODE) return; // Only execute if in FB_MODE
 262:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 266:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	09 f0       	breq	.+2      	; 0x270 <FBfunction+0xe>
 26e:	86 c0       	rjmp	.+268    	; 0x37c <FBfunction+0x11a>

	switch (counter){
 270:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <counter>
 274:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <counter+0x1>
 278:	35 96       	adiw	r30, 0x05	; 5
 27a:	eb 30       	cpi	r30, 0x0B	; 11
 27c:	f1 05       	cpc	r31, r1
 27e:	08 f0       	brcs	.+2      	; 0x282 <FBfunction+0x20>
 280:	7d c0       	rjmp	.+250    	; 0x37c <FBfunction+0x11a>
 282:	ec 5c       	subi	r30, 0xCC	; 204
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__tablejump2__>
		case 0 : 
		        motorOff();
 28a:	0e 94 92 00 	call	0x124	; 0x124 <motorOff>
				speedMotors = 255;
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <speedMotors+0x1>
 296:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <speedMotors>
				break;
 29a:	08 95       	ret
		case 1 :
		        motorOn(); 
 29c:	0e 94 8e 00 	call	0x11c	; 0x11c <motorOn>
				PORTD &= ~(1<<PORTD4);
 2a0:	8b b1       	in	r24, 0x0b	; 11
 2a2:	8f 7e       	andi	r24, 0xEF	; 239
 2a4:	8b b9       	out	0x0b, r24	; 11
		        speedMotors = 252;
 2a6:	8c ef       	ldi	r24, 0xFC	; 252
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <speedMotors+0x1>
 2ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <speedMotors>
				forward();
 2b2:	0e 94 73 00 	call	0xe6	; 0xe6 <forward>
				break;
 2b6:	08 95       	ret
		case 2 :
		        motorOn();
 2b8:	0e 94 8e 00 	call	0x11c	; 0x11c <motorOn>
				speedMotors = 249;
 2bc:	89 ef       	ldi	r24, 0xF9	; 249
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <speedMotors+0x1>
 2c4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <speedMotors>
				forward();
 2c8:	0e 94 73 00 	call	0xe6	; 0xe6 <forward>
				break;
 2cc:	08 95       	ret
		case 3:
		        motorOn(); 
 2ce:	0e 94 8e 00 	call	0x11c	; 0x11c <motorOn>
				speedMotors = 246;
 2d2:	86 ef       	ldi	r24, 0xF6	; 246
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <speedMotors+0x1>
 2da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <speedMotors>
				forward();
 2de:	0e 94 73 00 	call	0xe6	; 0xe6 <forward>
				break;
 2e2:	08 95       	ret
		case 4:
		        motorOn(); 
 2e4:	0e 94 8e 00 	call	0x11c	; 0x11c <motorOn>
				speedMotors = 243;
 2e8:	83 ef       	ldi	r24, 0xF3	; 243
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <speedMotors+0x1>
 2f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <speedMotors>
				forward();
 2f4:	0e 94 73 00 	call	0xe6	; 0xe6 <forward>
				break;
 2f8:	08 95       	ret
		case 5:
		        motorOn(); 
 2fa:	0e 94 8e 00 	call	0x11c	; 0x11c <motorOn>
				speedMotors = 240;
 2fe:	80 ef       	ldi	r24, 0xF0	; 240
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <speedMotors+0x1>
 306:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <speedMotors>
				forward();
 30a:	0e 94 73 00 	call	0xe6	; 0xe6 <forward>
				break;
 30e:	08 95       	ret
        case -1:
		        motorOn();
 310:	0e 94 8e 00 	call	0x11c	; 0x11c <motorOn>
        		speedMotors = 252;
 314:	8c ef       	ldi	r24, 0xFC	; 252
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <speedMotors+0x1>
 31c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <speedMotors>
        		backward();
 320:	0e 94 7a 00 	call	0xf4	; 0xf4 <backward>
        		break;
 324:	08 95       	ret
		case -2:
		        motorOn();
 326:	0e 94 8e 00 	call	0x11c	; 0x11c <motorOn>
				speedMotors = 249;
 32a:	89 ef       	ldi	r24, 0xF9	; 249
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <speedMotors+0x1>
 332:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <speedMotors>
				backward();
 336:	0e 94 7a 00 	call	0xf4	; 0xf4 <backward>
				break;
 33a:	08 95       	ret
		case -3:
		        motorOn();
 33c:	0e 94 8e 00 	call	0x11c	; 0x11c <motorOn>
				speedMotors = 246;
 340:	86 ef       	ldi	r24, 0xF6	; 246
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <speedMotors+0x1>
 348:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <speedMotors>
				backward();
 34c:	0e 94 7a 00 	call	0xf4	; 0xf4 <backward>
				break;
 350:	08 95       	ret
		case -4:
		        motorOn();
 352:	0e 94 8e 00 	call	0x11c	; 0x11c <motorOn>
				speedMotors = 243;
 356:	83 ef       	ldi	r24, 0xF3	; 243
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <speedMotors+0x1>
 35e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <speedMotors>
				backward();
 362:	0e 94 7a 00 	call	0xf4	; 0xf4 <backward>
				break;
 366:	08 95       	ret
		case -5:
		        motorOn();
 368:	0e 94 8e 00 	call	0x11c	; 0x11c <motorOn>
				speedMotors = 240;
 36c:	80 ef       	ldi	r24, 0xF0	; 240
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <speedMotors+0x1>
 374:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <speedMotors>
				backward();
 378:	0e 94 7a 00 	call	0xf4	; 0xf4 <backward>
 37c:	08 95       	ret

0000037e <RBfunction>:
}


void RBfunction (){
	
	    if (stateF != RB_MODE) return; // Only execute if in RB_MODE
 37e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 382:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 386:	02 97       	sbiw	r24, 0x02	; 2
 388:	09 f5       	brne	.+66     	; 0x3cc <RBfunction+0x4e>
	
	switch (gg){
 38a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <gg>
 38e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <gg+0x1>
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	91 05       	cpc	r25, r1
 396:	19 f0       	breq	.+6      	; 0x39e <RBfunction+0x20>
 398:	02 97       	sbiw	r24, 0x02	; 2
 39a:	69 f0       	breq	.+26     	; 0x3b6 <RBfunction+0x38>
 39c:	08 95       	ret
		case 1 : 
					motorOn();
 39e:	0e 94 8e 00 	call	0x11c	; 0x11c <motorOn>
					PORTD &= ~(1<<PORTD4);
 3a2:	8b b1       	in	r24, 0x0b	; 11
 3a4:	8f 7e       	andi	r24, 0xEF	; 239
 3a6:	8b b9       	out	0x0b, r24	; 11
		            leftTank();
 3a8:	0e 94 84 00 	call	0x108	; 0x108 <leftTank>
					counter = 0;
 3ac:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter+0x1>
 3b0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter>
					break;
 3b4:	08 95       	ret
		case 2 :
					motorOn();
 3b6:	0e 94 8e 00 	call	0x11c	; 0x11c <motorOn>
					PORTD &= ~(1<<PORTD4);
 3ba:	8b b1       	in	r24, 0x0b	; 11
 3bc:	8f 7e       	andi	r24, 0xEF	; 239
 3be:	8b b9       	out	0x0b, r24	; 11
		            rightTank();
 3c0:	0e 94 89 00 	call	0x112	; 0x112 <rightTank>
					counter = 0;
 3c4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter+0x1>
 3c8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter>
 3cc:	08 95       	ret

000003ce <statemachine>:
	}
}

void statemachine(){
			// Call appropriate function based on state
			if (stateF == FB_MODE) {
 3ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	19 f4       	brne	.+6      	; 0x3e0 <statemachine+0x12>
				FBfunction();
 3da:	0e 94 31 01 	call	0x262	; 0x262 <FBfunction>
 3de:	08 95       	ret
				//stateF = 0;
				} else if (stateF == RB_MODE) {
 3e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3e8:	02 97       	sbiw	r24, 0x02	; 2
 3ea:	11 f4       	brne	.+4      	; 0x3f0 <statemachine+0x22>
				RBfunction();
 3ec:	0e 94 bf 01 	call	0x37e	; 0x37e <RBfunction>
 3f0:	08 95       	ret

000003f2 <__tablejump2__>:
 3f2:	ee 0f       	add	r30, r30
 3f4:	ff 1f       	adc	r31, r31
 3f6:	05 90       	lpm	r0, Z+
 3f8:	f4 91       	lpm	r31, Z
 3fa:	e0 2d       	mov	r30, r0
 3fc:	09 94       	ijmp

000003fe <_exit>:
 3fe:	f8 94       	cli

00000400 <__stop_program>:
 400:	ff cf       	rjmp	.-2      	; 0x400 <__stop_program>
